{"version":3,"sources":["components/TBody/Tbody.jsx","components/Table/Table.jsx","components/Form/Form.jsx","components/Container/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["Tbody","props","contact","handleEdit","key","id","name","username","phone","email","company","website","className","type","onClick","Swal","fire","title","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","handleDelete","table","contacts","showForm","toggleForm","map","item","Form","useState","newContact","setNewContact","ids","setIds","handleChange","event","target","editmode","lastId","useEffect","editContact","onSubmit","preventDefault","alert","includes","updateContact","position","showConfirmButton","timer","handleAdd","htmlFor","onChange","Container","firstTime","setFirstTime","setEditContact","setContacts","animateForm","SetAnimateForm","setShowForm","search","setSearch","filtered","setFiltered","setEditmode","setTimeout","filter","toLowerCase","startsWith","fetch","response","json","data","placeholder","Table","obj","tempContact","length","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c21f956.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Swal from 'sweetalert2'\r\n\r\nfunction Tbody(props)  {\r\n  const deleteItem=(name)=>{\r\n    Swal.fire({\r\n      title: ` مخاطب ${name} حذف شود؟`,\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'بله',\r\n      cancelButtonText: 'خير'\r\n    }).then((result) => {\r\n      if (result.value) {\r\n        Swal.fire(\r\n          props.handleDelete(),\r\n          'حذف شد!',\r\n          'success'\r\n        )\r\n      }\r\n    })\r\n      \r\n  }\r\n    const { contact,handleEdit } = props\r\n\r\n    return (\r\n\r\n      <tr key={contact.id}>\r\n        <td>{contact.id}</td>\r\n        <td>{contact.name}</td>\r\n        <td>{contact.username}</td>\r\n        <td>{contact.phone}</td>\r\n        <td>{contact.email}</td>\r\n        <td>{contact.company}</td>\r\n        <td>{contact.website}</td>\r\n        <td className=\"buttons\"><button type=\"button\" onClick={()=>deleteItem(contact.name)} className=\"btn btn-danger\">delete</button>\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={()=>handleEdit(contact)}>edit</button> </td>\r\n      </tr>\r\n\r\n    );\r\n  \r\n}\r\n\r\nexport default Tbody;\r\n","import React from 'react';\r\nimport Tbody from '../TBody/Tbody'\r\nimport './TableStyle.scss'\r\nfunction table(props) {\r\n\r\n\r\n        const { contacts, showForm, toggleForm,handleEdit } = props\r\n        return (\r\n            <div id=\"table\" className=\"table-responsive\">\r\n                <table className=\"table table-striped table-hover\">\r\n                    <thead className=\"thead text-primary bg-light\">\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>name</th>\r\n                            <th>username</th>\r\n                            <th>phone number</th>\r\n                            <th>email</th>\r\n                            <th>company</th>\r\n                            <th>website</th>\r\n                            <th id=\"action\">action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {contacts.map((item) => (\r\n                            <Tbody key={item.id} contact={item} handleEdit={handleEdit} handleDelete={() => props.handleDelete(item.id)} />))}\r\n                    </tbody>\r\n                </table>\r\n                <button className=\"btn btn-success mx-4 \" onClick={toggleForm}>{showForm ? 'close' : 'add'}</button>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default table;","import React, { useState, useEffect } from 'react';\r\nimport './Form.scss';\r\nimport Swal from 'sweetalert2';\r\n\r\nfunction Form(props) {\r\n    let [newContact, setNewContact] = useState({\r\n        id: 1,\r\n        name: '',\r\n        username: '',\r\n        phone: '',\r\n        email: '',\r\n        company: '',\r\n        website: '',\r\n    })\r\n    const [ids, setIds] = useState([]);\r\n    \r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        if(props.editmode){\r\n            setNewContact({...newContact,[name]:value})\r\n        }else{\r\n        setNewContact({ ...newContact, id: props.lastId + 1, [name]: value });\r\n        }\r\n    }\r\n\r\n    const handlesubmit = (event) => {\r\n        event.preventDefault();\r\n        const { name, username, phone, email, company, website } = newContact\r\n        if ((name && username && phone && email && company && website) === '') {\r\n            alert(' هيچ ورودي نبايد خالي باشد')\r\n        } else if (ids.includes(newContact.id)) {\r\n            props.updateContact(newContact)\r\n            props.toggleForm()\r\n            Swal.fire({\r\n                position: 'center',\r\n                icon: 'success',\r\n                title: 'به روز رساني شد',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n            })\r\n        } else {\r\n            props.handleAdd(newContact)\r\n            props.toggleForm();\r\n            Swal.fire({\r\n                position: 'center',\r\n                icon: 'success',\r\n                title: 'اضافه شد',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.editmode) {\r\n            setNewContact(props.editContact)\r\n        }\r\n    }, [props.editContact, props.editmode]);\r\n\r\n\r\n    useEffect(() => {\r\n        let ids = props.contacts.map(item => item.id)\r\n        setIds(ids)\r\n    }, [newContact, props.contacts]);\r\n\r\n\r\n    const { name, username, phone, email, company, website } = newContact\r\n    return (\r\n        <div id=\"form\">\r\n            <form id=\"form_contact\" onSubmit={handlesubmit}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"id_name\">name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"id_name\"\r\n                        name=\"name\"\r\n                        onChange={handleChange} value={name}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"id_last_name\">username</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"id_last_name\"\r\n                        name=\"username\"\r\n                        onChange={handleChange} value={username}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"id_Phone_number\">phone number</label>\r\n                    <input\r\n                        type=\"phone\"\r\n                        className=\"form-control\"\r\n                        id=\"id_Phone_number\"\r\n                        name=\"phone\"\r\n                        onChange={handleChange} value={phone}\r\n                    /></div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"id_email\">email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        id=\"id_email\"\r\n                        name=\"email\"\r\n                        onChange={handleChange} value={email}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"id_company\">company name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"id_company\"\r\n                        name=\"company\"\r\n                        onChange={handleChange} value={company}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"id_website\">website</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"id_website\"\r\n                        name=\"website\"\r\n                        onChange={handleChange} value={website}\r\n                    />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Form;","import React, { useState, useEffect } from 'react';\r\nimport Table from '../Table/Table'\r\nimport Form from '../Form/Form'\r\nimport './styleContainer.scss'\r\nfunction Container() {\r\n    const [firstTime, setFirstTime] = useState(true)\r\n    const [editContact, setEditContact] = useState({})\r\n    const [contacts, setContacts] = useState([]);\r\n    const [animateForm, SetAnimateForm] = useState(null);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [search, setSearch] = useState('');\r\n    const [filtered, setFiltered] = useState([]);\r\n    const [editmode, setEditmode] = useState(false)\r\n\r\n    const handelChange = event => {\r\n        const { value } = event.target;\r\n        setSearch(value);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        setContacts(contacts.filter(contact => contact.id !== id))\r\n    }\r\n    const handleEdit = (contact) => {\r\n        toggleForm();\r\n        setEditmode(true)\r\n        setEditContact(contact)\r\n    }\r\n    const updateContact = (contact) => {\r\n        let tempContact = contacts;\r\n         tempContact.map(item => {if(item.id===contact.id){\r\n             item.id=contact.id\r\n             item.name =contact.name\r\n             item.username=contact.username\r\n             item.phone=contact.phone\r\n             item.email=contact.email\r\n             item.company=contact.company\r\n             item.website=contact.website\r\n             return item;\r\n         }else return item\r\n        } )\r\n        setContacts(tempContact)\r\n    }\r\n    const toggleForm = () => {\r\n        if (showForm) {\r\n            SetAnimateForm(false)\r\n            setTimeout(() => {\r\n                setShowForm(false)\r\n            }, 1000)\r\n        } else {\r\n            SetAnimateForm(true);\r\n            setShowForm(true)\r\n        }\r\n    }\r\n\r\n    const handleAdd = (obj) => {\r\n        setContacts([...contacts, obj])\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setFiltered(contacts.filter(item => item.name.toLowerCase().startsWith(search.toLowerCase())))\r\n    }, [search, contacts])\r\n\r\n    useEffect(() => {\r\n        if (firstTime) {\r\n            fetch('https://jsonplaceholder.ir/users/')\r\n                .then(response => response.json())\r\n                .then(data => { setContacts(data) });\r\n            setFirstTime(false)\r\n        } else { return }\r\n    }, [firstTime])\r\n\r\n\r\n    return (\r\n        <div className={`contain ${animateForm ? 'open-Form' : 'hide-form'}`}>\r\n            <input type=\"text\" name=\"search\" onChange={handelChange} value={search} placeholder=\"search\" />\r\n            <div className=\"all\">\r\n                <Table contacts={filtered} handleDelete={handleDelete} handleEdit={handleEdit} showForm={showForm} toggleForm={toggleForm} />\r\n\r\n                {\r\n                    showForm ? <Form handleAdd={handleAdd} editmode={editmode} updateContact={updateContact} editContact={editContact} contacts={contacts} toggleForm={toggleForm} lastId={contacts[contacts.length - 1].id} /> : null\r\n\r\n                }\r\n            </div>\r\n        </div>)\r\n\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport './App.css';\nimport Container from './components/Container/Container'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Container />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}